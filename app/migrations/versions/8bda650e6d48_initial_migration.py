"""Initial migration

Revision ID: 8bda650e6d48
Revises: 
Create Date: 2025-07-26 18:25:46.973318

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8bda650e6d48'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_analytics_visit_time'), table_name='analytics')
    op.drop_table('analytics')
    op.drop_table('workexperience')
    op.drop_index(op.f('ix_WorkExperience_id'), table_name='WorkExperience')
    op.drop_table('WorkExperience')
    op.drop_table('blogposts')
    op.drop_index(op.f('idx_tasks_status'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_table('testimonials')
    op.drop_table('telegramsubscribers')
    op.drop_index(op.f('ix_Users_id'), table_name='Users')
    op.drop_table('Users')
    op.drop_table('subscriberpreferences')
    op.drop_index(op.f('ix_Analytics_id'), table_name='Analytics')
    op.drop_table('Analytics')
    op.drop_index(op.f('ix_TelegramSubscribers_id'), table_name='TelegramSubscribers')
    op.drop_table('TelegramSubscribers')
    op.drop_index(op.f('ix_Education_id'), table_name='Education')
    op.drop_table('Education')
    op.drop_index(op.f('ix_Polls_id'), table_name='Polls')
    op.drop_table('Polls')
    op.drop_index(op.f('ix_Profile_id'), table_name='Profile')
    op.drop_table('Profile')
    op.drop_index(op.f('ix_Tasks_id'), table_name='Tasks')
    op.drop_table('Tasks')
    op.drop_index(op.f('ix_Testimonials_id'), table_name='Testimonials')
    op.drop_table('Testimonials')
    op.drop_index(op.f('ix_MLPredictions_id'), table_name='MLPredictions')
    op.drop_table('MLPredictions')
    op.drop_index(op.f('ix_SubscriberPreferences_id'), table_name='SubscriberPreferences')
    op.drop_table('SubscriberPreferences')
    op.drop_table('users')
    op.drop_table('projecttags')
    op.drop_table('posttags')
    op.drop_table('tags')
    op.drop_table('mlpredictions')
    op.drop_table('ProjectTags')
    op.drop_table('socialmedia')
    op.drop_index(op.f('ix_SocialMedia_id'), table_name='SocialMedia')
    op.drop_table('SocialMedia')
    op.drop_table('skills')
    op.drop_index(op.f('ix_Messages_id'), table_name='Messages')
    op.drop_table('Messages')
    op.drop_table('polls')
    op.drop_index(op.f('ix_Tags_id'), table_name='Tags')
    op.drop_table('Tags')
    op.drop_table('projects')
    op.drop_index(op.f('ix_Projects_id'), table_name='Projects')
    op.drop_table('Projects')
    op.drop_table('profile')
    op.drop_table('education')
    op.drop_index(op.f('ix_Skills_id'), table_name='Skills')
    op.drop_table('Skills')
    op.drop_index(op.f('ix_BlogPosts_id'), table_name='BlogPosts')
    op.drop_table('BlogPosts')
    op.drop_index(op.f('idx_messages_date_sent'), table_name='messages')
    op.drop_table('messages')
    op.drop_table('PostTags')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('PostTags',
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['BlogPosts.id'], name=op.f('PostTags_post_id_fkey')),
    sa.ForeignKeyConstraint(['tag_id'], ['Tags.id'], name=op.f('PostTags_tag_id_fkey')),
    sa.PrimaryKeyConstraint('post_id', 'tag_id', name=op.f('PostTags_pkey'))
    )
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('messages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date_sent', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='messages_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_messages_date_sent'), 'messages', ['date_sent'], unique=False)
    op.create_table('BlogPosts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('date_published', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('BlogPosts_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('BlogPosts_pkey'))
    )
    op.create_index(op.f('ix_BlogPosts_id'), 'BlogPosts', ['id'], unique=False)
    op.create_table('Skills',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('skill_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('proficiency_level', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('Skills_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('Skills_pkey'))
    )
    op.create_index(op.f('ix_Skills_id'), 'Skills', ['id'], unique=False)
    op.create_table('education',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('institution', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('degree', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('field_of_study', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('education_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('education_pkey'))
    )
    op.create_table('profile',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('photo_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resume_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('profile_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('profile_pkey'))
    )
    op.create_table('Projects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Projects_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('project_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('date_completed', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='Projects_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='Projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_Projects_id'), 'Projects', ['id'], unique=False)
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('projects_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('project_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('date_completed', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='projects_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Tags',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Tags_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('tag_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Tags_pkey'),
    sa.UniqueConstraint('tag_name', name='Tags_tag_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_Tags_id'), 'Tags', ['id'], unique=False)
    op.create_table('polls',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('telegram_user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['telegram_user_id'], ['telegramsubscribers.telegram_user_id'], name=op.f('polls_telegram_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('polls_pkey'))
    )
    op.create_table('Messages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Messages_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('date_sent', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Messages_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_Messages_id'), 'Messages', ['id'], unique=False)
    op.create_table('skills',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('skill_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('proficiency_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint('proficiency_level >= 1 AND proficiency_level <= 5', name=op.f('skills_proficiency_level_check')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('skills_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('skills_pkey'))
    )
    op.create_table('SocialMedia',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('platform_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('profile_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('SocialMedia_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('SocialMedia_pkey'))
    )
    op.create_index(op.f('ix_SocialMedia_id'), 'SocialMedia', ['id'], unique=False)
    op.create_table('socialmedia',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('platform_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('profile_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('socialmedia_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('socialmedia_pkey'))
    )
    op.create_table('ProjectTags',
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['Projects.id'], name=op.f('ProjectTags_project_id_fkey')),
    sa.ForeignKeyConstraint(['tag_id'], ['Tags.id'], name=op.f('ProjectTags_tag_id_fkey')),
    sa.PrimaryKeyConstraint('project_id', 'tag_id', name=op.f('ProjectTags_pkey'))
    )
    op.create_table('mlpredictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('input_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prediction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], name=op.f('mlpredictions_message_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('mlpredictions_pkey'))
    )
    op.create_table('tags',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tags_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tag_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tags_pkey'),
    sa.UniqueConstraint('tag_name', name='tags_tag_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('posttags',
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['blogposts.id'], name=op.f('posttags_post_id_fkey')),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('posttags_tag_id_fkey')),
    sa.PrimaryKeyConstraint('post_id', 'tag_id', name=op.f('posttags_pkey'))
    )
    op.create_table('projecttags',
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('projecttags_project_id_fkey')),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('projecttags_tag_id_fkey')),
    sa.PrimaryKeyConstraint('project_id', 'tag_id', name=op.f('projecttags_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('SubscriberPreferences',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('telegram_user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['telegram_user_id'], ['TelegramSubscribers.telegram_user_id'], name=op.f('SubscriberPreferences_telegram_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('SubscriberPreferences_pkey'))
    )
    op.create_index(op.f('ix_SubscriberPreferences_id'), 'SubscriberPreferences', ['id'], unique=False)
    op.create_table('MLPredictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('input_text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prediction', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['Messages.id'], name=op.f('MLPredictions_message_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('MLPredictions_pkey'))
    )
    op.create_index(op.f('ix_MLPredictions_id'), 'MLPredictions', ['id'], unique=False)
    op.create_table('Testimonials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quote', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('Testimonials_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('Testimonials_pkey'))
    )
    op.create_index(op.f('ix_Testimonials_id'), 'Testimonials', ['id'], unique=False)
    op.create_table('Tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('Tasks_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('Tasks_pkey'))
    )
    op.create_index(op.f('ix_Tasks_id'), 'Tasks', ['id'], unique=False)
    op.create_table('Profile',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('bio', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('photo_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resume_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('Profile_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('Profile_pkey'))
    )
    op.create_index(op.f('ix_Profile_id'), 'Profile', ['id'], unique=False)
    op.create_table('Polls',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('telegram_user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('question', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['telegram_user_id'], ['TelegramSubscribers.telegram_user_id'], name=op.f('Polls_telegram_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('Polls_pkey'))
    )
    op.create_index(op.f('ix_Polls_id'), 'Polls', ['id'], unique=False)
    op.create_table('Education',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('institution', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('degree', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('field_of_study', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('Education_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('Education_pkey'))
    )
    op.create_index(op.f('ix_Education_id'), 'Education', ['id'], unique=False)
    op.create_table('TelegramSubscribers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('telegram_user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subscribed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('TelegramSubscribers_pkey')),
    sa.UniqueConstraint('telegram_user_id', name=op.f('TelegramSubscribers_telegram_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_TelegramSubscribers_id'), 'TelegramSubscribers', ['id'], unique=False)
    op.create_table('Analytics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('page_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('visit_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('Analytics_pkey'))
    )
    op.create_index(op.f('ix_Analytics_id'), 'Analytics', ['id'], unique=False)
    op.create_table('subscriberpreferences',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('telegram_user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['telegram_user_id'], ['telegramsubscribers.telegram_user_id'], name=op.f('subscriberpreferences_telegram_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriberpreferences_pkey'))
    )
    op.create_table('Users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Users_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Users_pkey'),
    sa.UniqueConstraint('email', name='Users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='Users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_Users_id'), 'Users', ['id'], unique=False)
    op.create_table('telegramsubscribers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('telegram_user_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subscribed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('telegramsubscribers_pkey')),
    sa.UniqueConstraint('telegram_user_id', name=op.f('telegramsubscribers_telegram_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('testimonials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quote', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('testimonials_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('testimonials_pkey'))
    )
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('tasks_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tasks_pkey'))
    )
    op.create_index(op.f('idx_tasks_status'), 'tasks', ['status'], unique=False)
    op.create_table('blogposts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date_published', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('blogposts_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('blogposts_pkey'))
    )
    op.create_table('WorkExperience',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('position', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name=op.f('WorkExperience_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('WorkExperience_pkey'))
    )
    op.create_index(op.f('ix_WorkExperience_id'), 'WorkExperience', ['id'], unique=False)
    op.create_table('workexperience',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('position', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('workexperience_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workexperience_pkey'))
    )
    op.create_table('analytics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('page_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('visit_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_pkey'))
    )
    op.create_index(op.f('idx_analytics_visit_time'), 'analytics', ['visit_time'], unique=False)
    # ### end Alembic commands ###
