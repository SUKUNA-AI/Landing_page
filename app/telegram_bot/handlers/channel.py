from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.enums import ChatType
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from app.database import get_db
from app.dao.models_dao import ProjectDAO
from app.services.github_service import find_latest_active_repo, get_latest_commits
from app.config import settings
from google import genai
import logging
import asyncio
import aiohttp

logger = logging.getLogger(__name__)

async def get_repo_description(repo_name: str) -> dict:
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"token {settings.GITHUB_TOKEN}"}
        url = f"https://api.github.com/repos/{settings.GITHUB_USER}/{repo_name}"
        try:
            async with session.get(url, headers=headers) as response:
                if response.status != 200:
                    logger.error(f"Failed to fetch repo {repo_name}: {response.status}")
                    return {"name": repo_name, "description": "–ö—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç! üòé", "url": f"https://github.com/{settings.GITHUB_USER}/{repo_name}"}
                repo = await response.json()
                return {
                    "name": repo["name"],
                    "description": repo["description"] or "–ö—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç! üòé",
                    "url": repo["html_url"]
                }
        except aiohttp.ClientError as e:
            logger.error(f"Network error fetching repo {repo_name}: {str(e)}")
            return {"name": repo_name, "description": "–ö—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç! üòé", "url": f"https://github.com/{settings.GITHUB_USER}/{repo_name}"}

async def moderate_comment(message: Message):
    if str(message.chat.id) != settings.CHANNEL_ID:
        return
    if not message.text:
        return
    logger.info(f"Moderating comment in channel: {message.text}")
    try:
        client = genai.Client(api_key=settings.GEMINI_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º–∞ –∏–ª–∏ –Ω–µ—É–º–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: '{message.text}'.\n"
                     "–í–µ—Ä–Ω–∏ 'clean', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, –∏–ª–∏ 'spam', –µ—Å–ª–∏ –æ–Ω —Å–ø–∞–º –∏–ª–∏ –Ω–µ—É–º–µ—Å—Ç–Ω—ã–π."
        )
        if not hasattr(response, 'text') or response.text is None:
            logger.error("Gemini response has no text attribute")
            return
        result = response.text.strip()
        if result == "spam":
            await message.delete()
            logger.info(f"Deleted spam comment: {message.text}")
            if message.from_user:
                await message.bot.send_message(
                    message.from_user.id,
                    "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∞–º. üòï –ü–∏—à–∏ –ø–æ —Ç–µ–º–µ! üöÄ"
                )
    except Exception as e:
        logger.error(f"Gemini error moderating comment: {str(e)}")

async def reply_to_comment(message: Message):
    if str(message.chat.id) != settings.CHANNEL_ID or not message.text:
        return
    try:
        client = genai.Client(api_key=settings.GEMINI_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=(
                f"–û—Ç–≤–µ—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ, –∫–∞–∫ IT-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üî•üöÄüíª) –∏ —é–º–æ—Ä. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{message.text}'"
            ),
            config=genai.types.GenerateContentConfig(
                temperature=0.9,
                max_output_tokens=500
            )
        )
        if not hasattr(response, 'text') or response.text is None:
            logger.error("Gemini response has no text attribute")
            await message.reply("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å! üòÖ –ü–∏—à–∏ –µ—â—ë, —è –æ—Ç–≤–µ—á—É! üöÄ")
            return
        await message.reply(response.text)
        logger.info(f"Replied to comment: {message.text}")
    except Exception as e:
        logger.error(f"Gemini error replying to comment: {str(e)}")
        await message.reply("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å! üòÖ –ü–∏—à–∏ –µ—â—ë, —è –æ—Ç–≤–µ—á—É! üöÄ")

async def generate_post_content(latest_repo: str, commits: list, latest_project: dict) -> str:
    commit_details = "\n".join(
        f"- **{commit['message']}** (by {commit['author']})\n"
        f"  –§–∞–π–ª—ã: {', '.join(commit.get('files', [])) or '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n"
        f"  [–ö–æ–º–º–∏—Ç]({commit['url']})"
        for commit in commits
    )
    project_info = (
        f"üìÇ **{latest_project['name']}**\n"
        f"{latest_project['description']}\n"
        f"[–ü–µ—Ä–µ–π—Ç–∏]({latest_project['url']})"
    )
    prompt = (
        f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –æ —Å–≤–µ–∂–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤ GitHub. "
        f"–°—Ç–∏–ª—å: –¥–µ—Ä–∑–∫–∏–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, —Å IT-—é–º–æ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë–∞–≥–∏? –ù–µ, –Ω–µ —Å–ª—ã—à–∞–ª!'). "
        f"–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üî•üöÄüíªü§ñ). –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤. "
        f"–§–æ–∫—É—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π. "
        f"–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: '–ö–æ–¥–∏–º? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã!'. "
        f"–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –≤ Markdown.\n\n"
        f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {latest_repo}\n"
        f"–ö–æ–º–º–∏—Ç—ã:\n{commit_details}\n"
        f"–ü—Ä–æ–µ–∫—Ç:\n{project_info}"
    )
    try:
        client = genai.Client(api_key=settings.GEMINI_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt,
            config=genai.types.GenerateContentConfig(
                temperature=0.9,
                max_output_tokens=300
            )
        )
        if not hasattr(response, 'text') or response.text is None:
            logger.error("Gemini response has no text attribute")
            return (
                f"üî• –ê–ø–¥–µ–π—Ç –≤ [{latest_repo}](https://github.com/{settings.GITHUB_USER}/{latest_repo})! üöÄ\n\n"
                f"{commit_details}\n\n{project_info}\n\n–ö–æ–¥–∏–º? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã! üíªü§ñ"
            )[:4096]
        return response.text[:4096]
    except Exception as e:
        logger.error(f"Gemini error generating post: {str(e)}")
        return (
            f"üî• –ê–ø–¥–µ–π—Ç –≤ [{latest_repo}](https://github.com/{settings.GITHUB_USER}/{latest_repo})! üöÄ\n\n"
            f"{commit_details}\n\n{project_info}\n\n–ö–æ–¥–∏–º? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã! üíªü§ñ"
        )[:4096]

async def post_github_update(message: Message, bot: Bot):
    if str(message.from_user.id) != str(settings.ADMIN_TELEGRAM_ID):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞! üòé")
        return
    logger.info(f"Admin {message.from_user.id} requested GitHub update post")
    async for db in get_db():
        try:
            latest_repo = await find_latest_active_repo()
            if not latest_repo:
                await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòï")
                return
            commits = await get_latest_commits(latest_repo)
            if not commits:
                await message.answer("–ö–æ–º–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. üòÖ")
                return
            latest_project = await get_repo_description(latest_repo)

            post = await generate_post_content(latest_repo, commits, latest_project)
            try:
                await bot.send_message(settings.CHANNEL_ID, post, parse_mode="Markdown")
                await message.answer("–ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ! üéâ")
            except TelegramBadRequest as e:
                logger.error(f"Failed to send to channel {settings.CHANNEL_ID}: {str(e)}")
                await message.answer(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å CHANNEL_ID –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. üòï")
        except aiohttp.ClientError as e:
            logger.error(f"Network error fetching GitHub data: {str(e)}")
            await message.answer("–û—à–∏–±–∫–∞ —Å GitHub. üòÖ")
        except Exception as e:
            logger.error(f"Unexpected error posting update: {str(e)}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. üò¢")

async def auto_post_updates(bot: Bot):
    while True:
        async for db in get_db():
            try:
                try:
                    chat = await bot.get_chat(settings.CHANNEL_ID)
                    logger.info(f"Channel accessible: {chat.id}, {chat.title}")
                except TelegramBadRequest as e:
                    logger.error(f"Cannot access channel {settings.CHANNEL_ID}: {str(e)}")
                    await asyncio.sleep(86400)
                    continue
                latest_repo = await find_latest_active_repo()
                if not latest_repo:
                    logger.warning("No active repositories found.")
                    await asyncio.sleep(86400)
                    continue
                commits = await get_latest_commits(latest_repo)
                if not commits:
                    logger.warning(f"No commits found for {latest_repo}.")
                    await asyncio.sleep(86400)
                    continue
                latest_project = await get_repo_description(latest_repo)

                post = await generate_post_content(latest_repo, commits, latest_project)
                try:
                    await bot.send_message(settings.CHANNEL_ID, post, parse_mode="Markdown")
                    logger.info(f"Auto-posted from {latest_repo} to {settings.CHANNEL_ID}")
                except TelegramBadRequest as e:
                    logger.error(f"Failed to auto-post to {settings.CHANNEL_ID}: {str(e)}")
            except aiohttp.ClientError as e:
                logger.error(f"Network error in auto-post: {str(e)}")
            except Exception as e:
                logger.error(f"Unexpected error in auto-post: {str(e)}")
        await asyncio.sleep(86400)  # –†–∞–∑ –≤ –¥–µ–Ω—å

def register_channel_handlers(dp: Dispatcher, bot: Bot):
    dp.message.register(moderate_comment, F.chat.type == ChatType.CHANNEL)
    dp.message.register(reply_to_comment, F.chat.type == ChatType.CHANNEL)
    dp.message.register(post_github_update, Command(commands=["postupdate"]))
    async def start_auto_posting():
        asyncio.create_task(auto_post_updates(bot))
    dp.startup.register(start_auto_posting)