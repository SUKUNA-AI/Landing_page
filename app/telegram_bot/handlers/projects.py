from aiogram import Dispatcher, Bot
from aiogram.types import Message
from aiogram.filters import Command
from app.database import get_db
from app.dao.models_dao import ProjectDAO
import logging

logger = logging.getLogger(__name__)

async def cmd_projects(message: Message):
    logger.debug("Processing /projects command")
    try:
        async for db in get_db():
            projects = await ProjectDAO.get_all(db)
            if not projects:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤, –Ω–æ —Å–∫–æ—Ä–æ –∑–∞–∂–∂—ë–º! üî•", parse_mode="MarkdownV2")
                return
            response = "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:\n\n"
            for project in projects:
                response += (
                    f"*{project.title}*\n"
                    f"{project.description or '–ö—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç!'}\n"
                    f"[–ó–∞–ª–µ—Ç–∞–π]({project.project_url or 'https://github.com/SUKUNA-AI'}) üöÄ\n\n"
                )
            await message.answer(response, parse_mode="MarkdownV2")
            logger.info(f"Sent projects list to user {message.from_user.id}")
            break  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
    except Exception as e:
        logger.error(f"Error processing /projects: {str(e)}")
        await message.answer("–ë–∞–≥–∏? –≠—Ç–æ —Ñ–∏—á–∏! üòé –ù–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∑–∞–ª–µ—Ç–∞–π –ø–æ–∑–∂–µ! üöÄ", parse_mode="MarkdownV2")

def register_projects_handlers(dp: Dispatcher, bot: Bot):
    dp.message.register(cmd_projects, Command(commands=["projects"]))