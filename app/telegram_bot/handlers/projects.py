from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from app.database import get_db
from app.dao.models_dao import ProjectDAO
import logging

logger = logging.getLogger(__name__)

async def cmd_projects(message: Message):
    async for db in get_db():
        try:
            projects = await ProjectDAO.get_all(db)
            if not projects:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.")
                return

            response = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n"
            for project in projects:
                response += f"üìå {project.title}\n"
                response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {project.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                if project.project_url:
                    response += f"–°—Å—ã–ª–∫–∞: {project.project_url}\n"
                response += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {project.date_completed or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            await message.answer(response)
        except Exception as e:
            logger.error(f"Error fetching projects: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        break

def register_projects_handlers(dp: Dispatcher):
    dp.message.register(cmd_projects, Command("projects"))