import logging
import asyncio
import aiohttp

from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.enums import ChatType
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message

from app.database import get_db
from app.dao.models_dao import ProjectDAO
from app.services.github_service import find_latest_active_repo, get_latest_commits
from app.config import settings

from sqlalchemy.future import select
from app.models import Project  # –î–æ–±–∞–≤—å, –µ—Å–ª–∏ Project –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

from google import genai

logger = logging.getLogger(__name__)
GITHUB_HEADERS = {"Authorization": f"token {settings.GITHUB_TOKEN}"}


async def get_repo_description(repo_name: str) -> dict:
    url = f"https://api.github.com/repos/{settings.GITHUB_USER}/{repo_name}"
    fallback = {
        "name": repo_name,
        "description": "–ö—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç! üòé",
        "url": f"https://github.com/{settings.GITHUB_USER}/{repo_name}"
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=GITHUB_HEADERS) as response:
                if response.status != 200:
                    logger.error(f"Failed to fetch repo {repo_name}: {response.status}")
                    return fallback
                repo = await response.json()
                return {
                    "name": repo["name"],
                    "description": repo["description"] or fallback["description"],
                    "url": repo["html_url"]
                }
        except aiohttp.ClientError as e:
            logger.error(f"Network error fetching repo {repo_name}: {e}")
            return fallback


async def moderate_comment(message: Message):
    if str(message.chat.id) != settings.CHANNEL_ID or not message.text:
        return

    logger.info(f"Moderating comment: {message.text}")

    try:
        client = genai.Client(api_key=settings.GEMINI_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=(
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{message.text}'. "
                "–í–µ—Ä–Ω–∏ 'clean', –µ—Å–ª–∏ –Ω–æ—Ä–º, 'spam' ‚Äî –µ—Å–ª–∏ –Ω–µ—É–º–µ—Å—Ç–µ–Ω."
            )
        )

        result = getattr(response, "text", None)
        if not result:
            logger.error("Gemini: no text in response")
            return

        if result.strip() == "spam":
            await message.delete()
            logger.info(f"Deleted spam: {message.text}")
            if message.from_user:
                await message.bot.send_message(
                    message.from_user.id,
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω: —Å–ø–∞–º –∏–ª–∏ –æ—Ñ—Ñ—Ç–æ–ø. –ü–∏—à–∏ –ø–æ –¥–µ–ª—É, –∫–æ—Ç–∏–∫! üòº"
                )

    except Exception as e:
        logger.error(f"Error moderating comment: {e}")


async def reply_to_comment(message: Message):
    if str(message.chat.id) != settings.CHANNEL_ID or not message.text:
        return

    try:
        client = genai.Client(api_key=settings.GEMINI_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=(
                f"–û—Ç–≤–µ—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ IT-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç —Å —é–º–æ—Ä–æ–º –∏ —ç–º–æ–¥–∑–∏ üî•üöÄüíª: '{message.text}'"
            ),
            config=genai.types.GenerateContentConfig(
                temperature=0.9,
                max_output_tokens=500
            )
        )

        result = getattr(response, "text", None)
        if not result:
            await message.reply("–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å üòÖ –ü–∏—à–∏ –µ—â—ë!")
            return

        await message.reply(result)
        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç: {message.text}")

    except Exception as e:
        logger.error(f"Error replying to comment: {e}")
        await message.reply("–û–π, –≤—Å—ë —É–ø–∞–ª–æ... –Ω–æ —è –≤—Å—Ç–∞–Ω—É! ü§ñ –ü–∏—à–∏ –µ—â—ë!")


async def format_post(latest_repo: str, commits: list, db) -> str:
    commit_block = "\n".join(
        f"- **{c['message']}** (by {c['author']})\n"
        f"  –§–∞–π–ª—ã: {', '.join(c.get('files', [])) or '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n"
        f"  [–ö–æ–º–º–∏—Ç]({c['url']})"
        for c in commits
    )

    result = await db.execute(
        select(Project).filter_by(project_url=f"https://github.com/{settings.GITHUB_USER}/{latest_repo}")
    )
    project = result.scalars().first()

    project_block = (
        f"üìÇ **{project.title}**\n"
        f"{project.description or '–ö—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç! üòé'}\n"
        f"[–ü–µ—Ä–µ–π—Ç–∏]({project.project_url})"
    ) if project else (
        f"üìÇ **{latest_repo}**\n–ö—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç! üòé\n"
        f"[–ü–µ—Ä–µ–π—Ç–∏](https://github.com/{settings.GITHUB_USER}/{latest_repo})"
    )

    prompt = (
        f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –≤ Telegram-–∫–∞–Ω–∞–ª –ø—Ä–æ —Å–≤–µ–∂–∏–µ –∫–æ–º–º–∏—Ç—ã. –°—Ç–∏–ª—å: –¥–µ—Ä–∑–∫–∏–π, —Å —ç–º–æ–¥–∑–∏ –∏ —é–º–æ—Ä–æ–º ü§ñüî•üíª\n"
        f"–ú–∞–∫—Å 300 —Å–∏–º–≤–æ–ª–æ–≤, –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, Markdown —Ñ–æ—Ä–º–∞—Ç.\n\n"
        f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {latest_repo}\n"
        f"–ö–æ–º–º–∏—Ç—ã:\n{commit_block}\n"
        f"–ü—Ä–æ–µ–∫—Ç:\n{project_block}"
    )

    try:
        client = genai.Client(api_key=settings.GEMINI_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt,
            config=genai.types.GenerateContentConfig(
                temperature=0.9,
                max_output_tokens=300
            )
        )

        result = getattr(response, "text", None)
        if not result:
            raise ValueError("Empty Gemini response")

        return result[:4096]

    except Exception as e:
        logger.error(f"Error generating post: {e}")
        return (
            f"üî• –ê–ø–¥–µ–π—Ç –≤ [{latest_repo}](https://github.com/{settings.GITHUB_USER}/{latest_repo})! üöÄ\n\n"
            f"{commit_block}\n\n{project_block}\n\n–ö–æ–¥–∏–º? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã! üíªü§ñ"
        )[:4096]


async def post_github_update(message: Message, bot: Bot):
    if str(message.from_user.id) != str(settings.ADMIN_TELEGRAM_ID):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ üòé")
        return

    logger.info(f"Admin {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª GitHub –ø–æ—Å—Ç–∏–Ω–≥")

    async for db in get_db():
        try:
            latest_repo = await find_latest_active_repo()
            if not latest_repo:
                await message.answer("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
                return

            commits = await get_latest_commits(latest_repo)
            if not commits:
                await message.answer("–ö–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç üòÖ")
                return

            post = await format_post(latest_repo, commits, db)

            try:
                await bot.send_message(settings.CHANNEL_ID, post, parse_mode="Markdown")
                await message.answer("–ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ! üéâ")
            except TelegramBadRequest as e:
                logger.error(f"Send error: {e}")
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ CHANNEL_ID üòï")

        except aiohttp.ClientError as e:
            logger.error(f"GitHub network error: {e}")
            await message.answer("–û—à–∏–±–∫–∞ GitHub üòÖ")

        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üò¢")


async def auto_post_updates(bot: Bot):
    while True:
        async for db in get_db():
            try:
                try:
                    chat = await bot.get_chat(settings.CHANNEL_ID)
                    logger.info(f"–ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {chat.id} | {chat.title}")
                except TelegramBadRequest as e:
                    logger.error(f"–ö–∞–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    await asyncio.sleep(86400)
                    continue

                latest_repo = await find_latest_active_repo()
                if not latest_repo:
                    logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
                    await asyncio.sleep(86400)
                    continue

                commits = await get_latest_commits(latest_repo)
                if not commits:
                    logger.warning(f"–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –≤ {latest_repo}")
                    await asyncio.sleep(86400)
                    continue

                post = await format_post(latest_repo, commits, db)
                try:
                    await bot.send_message(settings.CHANNEL_ID, post, parse_mode="Markdown")
                    logger.info(f"–ê–≤—Ç–æ–ø–æ—Å—Ç: {latest_repo}")
                except TelegramBadRequest as e:
                    logger.error(f"Auto-post error: {e}")

            except Exception as e:
                logger.error(f"Fatal auto-post error: {e}")

        await asyncio.sleep(86400)


def register_rag_handlers(dp: Dispatcher, bot: Bot):
    dp.message.register(moderate_comment, F.chat.type == ChatType.CHANNEL)
    dp.message.register(reply_to_comment, F.chat.type == ChatType.CHANNEL)
    dp.message.register(post_github_update, Command(commands=["postupdate"]))

    async def start_auto_posting():
        asyncio.create_task(auto_post_updates(bot))

    dp.startup.register(start_auto_posting)
