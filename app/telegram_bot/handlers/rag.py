from aiogram import Bot, Dispatcher
from app.services.github_service import get_latest_commits, find_latest_active_repo
from app.config import settings
from langchain_google_genai import ChatGoogleGenerativeAI
import logging
import asyncio
import re

logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    reserved_chars = r'([_\*[\]()~`>#\+-=|{}.!])'
    text = re.sub(reserved_chars, r'\\\g<1>', text)
    text = text.replace('\n', '\n\n')  # –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    return text[:500]

async def format_post_with_gemini(repo_name: str, commits: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –¥–ª—è Telegram —Å –ø–æ–º–æ—â—å—é Gemini-2.5-flash."""
    llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash", google_api_key=settings.GEMINI_API_KEY)
    prompt = (
        f"–°–æ–∑–¥–∞–π –¥–µ—Ä–∑–∫–∏–π –∏ –≤–µ—Å—ë–ª—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram –æ —Å–≤–µ–∂–∏—Ö –∫–æ–º–º–∏—Ç–∞—Ö –≤ —Ä–µ–ø–æ {repo_name}. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ –∏–∑ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ —ç–º–æ–¥–∑–∏ (üî•üöÄüíª). –ú–∞–∫—Å. 1500 —Å–∏–º–≤–æ–ª–æ–≤. "
        f"–ö–æ–º–º–∏—Ç—ã: {', '.join([c['message'] for c in commits])}. "
        f"URL —Ä–µ–ø–æ: https://github.com/{settings.GITHUB_USER}/{repo_name}"
    )
    try:
        response = llm.invoke(prompt)
        if not response.content:
            logger.warning("Gemini response is empty")
            fallback = (
                f"üÜï –°–≤–µ–∂–∞–∫ –≤ *{repo_name}*! üî• "
                f"–ö–æ–º–º–∏—Ç—ã: {', '.join([c['message'][:30] + '...' for c in commits[:3]]) or '–ü–æ–∫–∞ —Ç–∏—Ö–æ'}. "
                f"[–ó–∞–ª–µ—Ç–∞–π](https://github.com/{settings.GITHUB_USER}/{repo_name}) \\üöÄ"
            )
            return escape_markdown_v2(fallback)
        return escape_markdown_v2(response.content)
    except Exception as e:
        logger.error(f"Gemini error: {str(e)}")
        fallback = (
            f"üÜï –°–≤–µ–∂–∞–∫ –≤ *{repo_name}*! üî• "
            f"–ö–æ–º–º–∏—Ç—ã: {', '.join([c['message'][:30] + '...' for c in commits[:3]]) or '–ü–æ–∫–∞ —Ç–∏—Ö–æ'}. "
            f"[–ó–∞–ª–µ—Ç–∞–π](https://github.com/{settings.GITHUB_USER}/{repo_name}) \\üöÄ"
        )
        return escape_markdown_v2(fallback)

async def check_and_post_updates(bot: Bot):
    repo_name = await find_latest_active_repo()
    if not repo_name:
        logger.warning("No repositories found.")
        return

    commits = await get_latest_commits(repo_name)
    if not commits:
        logger.warning(f"No commits found for {repo_name}.")
        return

    try:
        message = await format_post_with_gemini(repo_name, commits)
        await bot.send_message(
            chat_id=settings.CHANNEL_ID,
            text=message,
            parse_mode="MarkdownV2"
        )
        logger.info(f"Auto-posted from {repo_name} to {settings.CHANNEL_ID}")
    except Exception as e:
        logger.error(f"Failed to post update for {repo_name}: {str(e)}")

async def start_autoposting(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    async def scheduled_update():
        while True:
            await check_and_post_updates(bot)
            await asyncio.sleep(3600)  # –†–∞–∑ –≤ —á–∞—Å

    logger.info("Starting autoposting task...")
    asyncio.create_task(scheduled_update())

async def register_rag_handlers(dp: Dispatcher, bot: Bot):
    try:
        chat = await bot.get_chat(settings.CHANNEL_ID)
        logger.info(f"Channel accessible: {chat.id}, {chat.title}")
    except Exception as e:
        logger.error(f"Cannot access channel {settings.CHANNEL_ID}: {str(e)}")

    async def on_startup():
        await start_autoposting(bot)

    dp.startup.register(on_startup)