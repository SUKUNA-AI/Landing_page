from aiogram import Dispatcher, F
from aiogram.types import Message
from app.services.rag import get_rag_response
from app.database import get_db
import logging

logger = logging.getLogger(__name__)

async def process_text_query(message: Message):
    query = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–∞–∫ IT-–≥—É—Ä—É 2025 –≥–æ–¥–∞. –°—Ç–∏–ª—å: –¥–µ—Ä–∑–∫–∏–π, —Å —é–º–æ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ë–∞–≥–∏? –≠—Ç–æ —Ñ–∏—á–∏!'). –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üî•üöÄüíª) –∏ —Å–ª–µ–Ω–≥ ('–∑–∞–ª–µ—Ç–∞–π', '–∫–∞—á–∞–µ–º'). –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤. –ó–∞–ø—Ä–æ—Å: '{message.text}'"
    logger.debug(f"Processing query: {query}")
    async for db in get_db():
        try:
            response = await get_rag_response(query, db)
            await message.answer(response, parse_mode="Markdown")
            logger.info(f"Replied to query: {message.text}")
        except Exception as e:
            logger.error(f"Error processing query '{message.text}': {str(e)}")
            await message.answer("–ë–∞–≥–∏? –≠—Ç–æ —Ñ–∏—á–∏! üòé –ù–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∑–∞–ª–µ—Ç–∞–π –ø–æ–∑–∂–µ! üöÄ")
        break  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é

def register_rag_query_handlers(dp: Dispatcher):
    dp.message.register(process_text_query, F.text & ~F.text.startswith(("/", "!")))