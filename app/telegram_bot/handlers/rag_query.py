from aiogram import Dispatcher, Bot, F
from aiogram.types import Message
from app.services.rag import get_rag_response
from app.database import get_db
import logging
import re

logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    reserved_chars = r'([_\*[\]()~`>#\+-=|{}\.!])'
    text = re.sub(reserved_chars, r'\\\g<1>', text)
    text = re.sub(r'([\\]{2,})', r'\\', text)
    return text[:1500]  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤

async def process_text_query(message: Message):
    query = f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ, –±–µ–∑ —Å–ª–µ–Ω–≥–∞. –ú–∞–∫—Å–∏–º—É–º 1500 —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üî•üöÄüíª) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞. –í–æ–ø—Ä–æ—Å: '{message.text.encode('utf-8', errors='replace').decode('utf-8')}'"
    logger.debug(f"Processing query: {query}")
    async for db in get_db():
        try:
            response = await get_rag_response(query, db)
            escaped_response = escape_markdown_v2(response)
            await message.answer(escaped_response, parse_mode="MarkdownV2")
            logger.info(f"Replied to query: {message.text}")
        except Exception as e:
            logger.error(f"Error processing query '{message.text}': {str(e)}")
            fallback = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üöÄ"
            await message.answer(escape_markdown_v2(fallback), parse_mode="MarkdownV2")
        break

def register_rag_query_handlers(dp: Dispatcher, bot: Bot):
    dp.message.register(process_text_query, F.text & ~F.text.startswith(("/", "!")))